@startuml
!theme spacelab
skinparam linetype ortho
title Neighbourly Platform - Microservice Architecture (Refactored)

actor UserMobile as Mobile
actor UserWeb as Web

package "Kubernetes Cluster" {

    node "API Gateway" {
        component "Spring Cloud Gateway" as Gateway
    }

    node "Auth Service" {
        component "Auth Controller"
        database "Redis (OTP Cache)" as Redis
        database "PostgreSQL" as AuthDB
    }

    node "User Service" {
        component "User Controller"
        database "PostgreSQL" as UserDB
    }

    node "Listing Service" {
        component "Listing Controller"
        database "PostgreSQL" as ListingDB
    }

    node "Community Service" {
        component "Community Controller"
        database "PostgreSQL" as CommunityDB
    }

    node "Chat Service" {
        component "Chat Controller"
        database "MongoDB" as ChatDB
    }

    node "Notification Service" {
        component "Email / SMS Sender"
    }
}

Mobile --> Gateway : API Calls
Web --> Gateway : API Calls

Gateway --> "Auth Controller" : /auth/**
Gateway --> "User Controller" : /user/**
Gateway --> "Listing Controller" : /listings/**
Gateway --> "Community Controller" : /communities/**
Gateway --> "Chat Controller" : /chat/**

"Auth Controller" --> Redis : Store OTP
"Auth Controller" --> AuthDB : Auth data
"User Controller" --> UserDB : User profiles
"Listing Controller" --> ListingDB : Product & Service listings
"Community Controller" --> CommunityDB : Gated community data
"Chat Controller" --> ChatDB : Buyer-seller chats

"Auth Controller" --> "Notification Service" : Send OTP
"Listing Controller" --> "User Controller" : Check roles, verify sellers
"Listing Controller" --> "Community Controller" : Access visibility rules
"Chat Controller" --> "User Controller" : Resolve user details
@enduml